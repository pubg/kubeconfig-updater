// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.1
// source: protos/kubeconfig_service.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CredentialResolverKind int32

const (
	CredentialResolverKind_DEFAULT CredentialResolverKind = 0 //SDK Default Chain
	CredentialResolverKind_ENV     CredentialResolverKind = 1 //SDK ENV
	CredentialResolverKind_IMDS    CredentialResolverKind = 2 //Cloud IMDS API
	CredentialResolverKind_PROFILE CredentialResolverKind = 3 //SDK Profile
)

// Enum value maps for CredentialResolverKind.
var (
	CredentialResolverKind_name = map[int32]string{
		0: "DEFAULT",
		1: "ENV",
		2: "IMDS",
		3: "PROFILE",
	}
	CredentialResolverKind_value = map[string]int32{
		"DEFAULT": 0,
		"ENV":     1,
		"IMDS":    2,
		"PROFILE": 3,
	}
)

func (x CredentialResolverKind) Enum() *CredentialResolverKind {
	p := new(CredentialResolverKind)
	*p = x
	return p
}

func (x CredentialResolverKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredentialResolverKind) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_kubeconfig_service_proto_enumTypes[0].Descriptor()
}

func (CredentialResolverKind) Type() protoreflect.EnumType {
	return &file_protos_kubeconfig_service_proto_enumTypes[0]
}

func (x CredentialResolverKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredentialResolverKind.Descriptor instead.
func (CredentialResolverKind) EnumDescriptor() ([]byte, []int) {
	return file_protos_kubeconfig_service_proto_rawDescGZIP(), []int{0}
}

type CredentialResolverStatus int32

const (
	CredentialResolverStatus_CRED_RESOLVER_UNKNOWN  CredentialResolverStatus = 0
	CredentialResolverStatus_CRED_REGISTERED_OK     CredentialResolverStatus = 1
	CredentialResolverStatus_CRED_REGISTERED_NOT_OK CredentialResolverStatus = 2
	CredentialResolverStatus_CRED_SUGGESTION_OK     CredentialResolverStatus = 101
)

// Enum value maps for CredentialResolverStatus.
var (
	CredentialResolverStatus_name = map[int32]string{
		0:   "CRED_RESOLVER_UNKNOWN",
		1:   "CRED_REGISTERED_OK",
		2:   "CRED_REGISTERED_NOT_OK",
		101: "CRED_SUGGESTION_OK",
	}
	CredentialResolverStatus_value = map[string]int32{
		"CRED_RESOLVER_UNKNOWN":  0,
		"CRED_REGISTERED_OK":     1,
		"CRED_REGISTERED_NOT_OK": 2,
		"CRED_SUGGESTION_OK":     101,
	}
)

func (x CredentialResolverStatus) Enum() *CredentialResolverStatus {
	p := new(CredentialResolverStatus)
	*p = x
	return p
}

func (x CredentialResolverStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredentialResolverStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_kubeconfig_service_proto_enumTypes[1].Descriptor()
}

func (CredentialResolverStatus) Type() protoreflect.EnumType {
	return &file_protos_kubeconfig_service_proto_enumTypes[1]
}

func (x CredentialResolverStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredentialResolverStatus.Descriptor instead.
func (CredentialResolverStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_kubeconfig_service_proto_rawDescGZIP(), []int{1}
}

type MetadataResolverType int32

const (
	MetadataResolverType_META_RESOLVER_NOT_SETTED MetadataResolverType = 0
	MetadataResolverType_FOX                      MetadataResolverType = 2
	MetadataResolverType_KUBECONFIG               MetadataResolverType = 3
	MetadataResolverType_CRED_RESOLVER            MetadataResolverType = 4
)

// Enum value maps for MetadataResolverType.
var (
	MetadataResolverType_name = map[int32]string{
		0: "META_RESOLVER_NOT_SETTED",
		2: "FOX",
		3: "KUBECONFIG",
		4: "CRED_RESOLVER",
	}
	MetadataResolverType_value = map[string]int32{
		"META_RESOLVER_NOT_SETTED": 0,
		"FOX":                      2,
		"KUBECONFIG":               3,
		"CRED_RESOLVER":            4,
	}
)

func (x MetadataResolverType) Enum() *MetadataResolverType {
	p := new(MetadataResolverType)
	*p = x
	return p
}

func (x MetadataResolverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetadataResolverType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_kubeconfig_service_proto_enumTypes[2].Descriptor()
}

func (MetadataResolverType) Type() protoreflect.EnumType {
	return &file_protos_kubeconfig_service_proto_enumTypes[2]
}

func (x MetadataResolverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetadataResolverType.Descriptor instead.
func (MetadataResolverType) EnumDescriptor() ([]byte, []int) {
	return file_protos_kubeconfig_service_proto_rawDescGZIP(), []int{2}
}

type ClusterInformationStatus int32

const (
	ClusterInformationStatus_INFO_NOT_SETTED                   ClusterInformationStatus = 0
	ClusterInformationStatus_REGISTERED_OK                     ClusterInformationStatus = 1   //정상임
	ClusterInformationStatus_REGISTERED_NOTOK_NO_CRED_RESOLVER ClusterInformationStatus = 2   //등록되었으나 CredResolver가 없음
	ClusterInformationStatus_REGISTERED_NOTOK_CRED_RES_NOTOK   ClusterInformationStatus = 3   //등록되었으나 CredResolver가 비정상임
	ClusterInformationStatus_REGISTERED_UNKNOWN                ClusterInformationStatus = 4   //등록되었으나 상태를 알 수 없음
	ClusterInformationStatus_SUGGESTION_OK                     ClusterInformationStatus = 101 //등록 가능
	ClusterInformationStatus_SUGGESTION_NOTOK_NO_CRED_RESOLVER ClusterInformationStatus = 102 //CredResolver가 없어서 등록 불가
	ClusterInformationStatus_SUGGESTION_NOTOK_CRED_RES_NOTOK   ClusterInformationStatus = 103 //CredResolver가 비정상이라 등록 불가
)

// Enum value maps for ClusterInformationStatus.
var (
	ClusterInformationStatus_name = map[int32]string{
		0:   "INFO_NOT_SETTED",
		1:   "REGISTERED_OK",
		2:   "REGISTERED_NOTOK_NO_CRED_RESOLVER",
		3:   "REGISTERED_NOTOK_CRED_RES_NOTOK",
		4:   "REGISTERED_UNKNOWN",
		101: "SUGGESTION_OK",
		102: "SUGGESTION_NOTOK_NO_CRED_RESOLVER",
		103: "SUGGESTION_NOTOK_CRED_RES_NOTOK",
	}
	ClusterInformationStatus_value = map[string]int32{
		"INFO_NOT_SETTED":                   0,
		"REGISTERED_OK":                     1,
		"REGISTERED_NOTOK_NO_CRED_RESOLVER": 2,
		"REGISTERED_NOTOK_CRED_RES_NOTOK":   3,
		"REGISTERED_UNKNOWN":                4,
		"SUGGESTION_OK":                     101,
		"SUGGESTION_NOTOK_NO_CRED_RESOLVER": 102,
		"SUGGESTION_NOTOK_CRED_RES_NOTOK":   103,
	}
)

func (x ClusterInformationStatus) Enum() *ClusterInformationStatus {
	p := new(ClusterInformationStatus)
	*p = x
	return p
}

func (x ClusterInformationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterInformationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_kubeconfig_service_proto_enumTypes[3].Descriptor()
}

func (ClusterInformationStatus) Type() protoreflect.EnumType {
	return &file_protos_kubeconfig_service_proto_enumTypes[3]
}

func (x ClusterInformationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterInformationStatus.Descriptor instead.
func (ClusterInformationStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_kubeconfig_service_proto_rawDescGZIP(), []int{3}
}

type CredResolverConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId          string                   `protobuf:"bytes,1,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	InfraVendor        string                   `protobuf:"bytes,3,opt,name=InfraVendor,proto3" json:"InfraVendor,omitempty"`
	AccountAlias       string                   `protobuf:"bytes,2,opt,name=AccountAlias,proto3" json:"AccountAlias,omitempty"`
	Kind               CredentialResolverKind   `protobuf:"varint,4,opt,name=Kind,proto3,enum=kubeconfig.CredentialResolverKind" json:"Kind,omitempty"`
	ResolverAttributes map[string]string        `protobuf:"bytes,5,rep,name=ResolverAttributes,proto3" json:"ResolverAttributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status             CredentialResolverStatus `protobuf:"varint,6,opt,name=Status,proto3,enum=kubeconfig.CredentialResolverStatus" json:"Status,omitempty"`
}

func (x *CredResolverConfig) Reset() {
	*x = CredResolverConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_kubeconfig_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredResolverConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredResolverConfig) ProtoMessage() {}

func (x *CredResolverConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_kubeconfig_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredResolverConfig.ProtoReflect.Descriptor instead.
func (*CredResolverConfig) Descriptor() ([]byte, []int) {
	return file_protos_kubeconfig_service_proto_rawDescGZIP(), []int{0}
}

func (x *CredResolverConfig) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CredResolverConfig) GetInfraVendor() string {
	if x != nil {
		return x.InfraVendor
	}
	return ""
}

func (x *CredResolverConfig) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

func (x *CredResolverConfig) GetKind() CredentialResolverKind {
	if x != nil {
		return x.Kind
	}
	return CredentialResolverKind_DEFAULT
}

func (x *CredResolverConfig) GetResolverAttributes() map[string]string {
	if x != nil {
		return x.ResolverAttributes
	}
	return nil
}

func (x *CredResolverConfig) GetStatus() CredentialResolverStatus {
	if x != nil {
		return x.Status
	}
	return CredentialResolverStatus_CRED_RESOLVER_UNKNOWN
}

type CredResolversReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*CredResolverConfig `protobuf:"bytes,1,rep,name=Configs,proto3" json:"Configs,omitempty"`
}

func (x *CredResolversReq) Reset() {
	*x = CredResolversReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_kubeconfig_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredResolversReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredResolversReq) ProtoMessage() {}

func (x *CredResolversReq) ProtoReflect() protoreflect.Message {
	mi := &file_protos_kubeconfig_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredResolversReq.ProtoReflect.Descriptor instead.
func (*CredResolversReq) Descriptor() ([]byte, []int) {
	return file_protos_kubeconfig_service_proto_rawDescGZIP(), []int{1}
}

func (x *CredResolversReq) GetConfigs() []*CredResolverConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type GetCredResolversRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRes *CommonRes            `protobuf:"bytes,1,opt,name=CommonRes,proto3" json:"CommonRes,omitempty"`
	Configs   []*CredResolverConfig `protobuf:"bytes,2,rep,name=Configs,proto3" json:"Configs,omitempty"`
}

func (x *GetCredResolversRes) Reset() {
	*x = GetCredResolversRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_kubeconfig_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredResolversRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredResolversRes) ProtoMessage() {}

func (x *GetCredResolversRes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_kubeconfig_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredResolversRes.ProtoReflect.Descriptor instead.
func (*GetCredResolversRes) Descriptor() ([]byte, []int) {
	return file_protos_kubeconfig_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetCredResolversRes) GetCommonRes() *CommonRes {
	if x != nil {
		return x.CommonRes
	}
	return nil
}

func (x *GetCredResolversRes) GetConfigs() []*CredResolverConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type DeleteCredResolverReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
}

func (x *DeleteCredResolverReq) Reset() {
	*x = DeleteCredResolverReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_kubeconfig_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCredResolverReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCredResolverReq) ProtoMessage() {}

func (x *DeleteCredResolverReq) ProtoReflect() protoreflect.Message {
	mi := &file_protos_kubeconfig_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCredResolverReq.ProtoReflect.Descriptor instead.
func (*DeleteCredResolverReq) Descriptor() ([]byte, []int) {
	return file_protos_kubeconfig_service_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteCredResolverReq) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type KubeConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=CommonReq,proto3" json:"CommonReq,omitempty"`
	Config    string     `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
}

func (x *KubeConfigReq) Reset() {
	*x = KubeConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_kubeconfig_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeConfigReq) ProtoMessage() {}

func (x *KubeConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_protos_kubeconfig_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeConfigReq.ProtoReflect.Descriptor instead.
func (*KubeConfigReq) Descriptor() ([]byte, []int) {
	return file_protos_kubeconfig_service_proto_rawDescGZIP(), []int{4}
}

func (x *KubeConfigReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *KubeConfigReq) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type KubeConfigRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRes *CommonRes `protobuf:"bytes,1,opt,name=CommonRes,proto3" json:"CommonRes,omitempty"`
	Config    string     `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
}

func (x *KubeConfigRes) Reset() {
	*x = KubeConfigRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_kubeconfig_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeConfigRes) ProtoMessage() {}

func (x *KubeConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_kubeconfig_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeConfigRes.ProtoReflect.Descriptor instead.
func (*KubeConfigRes) Descriptor() ([]byte, []int) {
	return file_protos_kubeconfig_service_proto_rawDescGZIP(), []int{5}
}

func (x *KubeConfigRes) GetCommonRes() *CommonRes {
	if x != nil {
		return x.CommonRes
	}
	return nil
}

func (x *KubeConfigRes) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type ClusterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName    string `protobuf:"bytes,1,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	CredResolverId string `protobuf:"bytes,2,opt,name=CredResolverId,proto3" json:"CredResolverId,omitempty"`
	// ClusterRegion, ClusterEngine, ServicePhase, InfraVendor, InfraAccountId, ServiceTag, ClusterGroup
	ClusterTags map[string]string `protobuf:"bytes,3,rep,name=ClusterTags,proto3" json:"ClusterTags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClusterMetadata) Reset() {
	*x = ClusterMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_kubeconfig_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMetadata) ProtoMessage() {}

func (x *ClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_kubeconfig_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMetadata.ProtoReflect.Descriptor instead.
func (*ClusterMetadata) Descriptor() ([]byte, []int) {
	return file_protos_kubeconfig_service_proto_rawDescGZIP(), []int{6}
}

func (x *ClusterMetadata) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterMetadata) GetCredResolverId() string {
	if x != nil {
		return x.CredResolverId
	}
	return ""
}

func (x *ClusterMetadata) GetClusterTags() map[string]string {
	if x != nil {
		return x.ClusterTags
	}
	return nil
}

type AggregatedClusterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata      *ClusterMetadata         `protobuf:"bytes,1,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	DataResolvers []MetadataResolverType   `protobuf:"varint,2,rep,packed,name=DataResolvers,proto3,enum=kubeconfig.MetadataResolverType" json:"DataResolvers,omitempty"`
	Status        ClusterInformationStatus `protobuf:"varint,3,opt,name=Status,proto3,enum=kubeconfig.ClusterInformationStatus" json:"Status,omitempty"`
}

func (x *AggregatedClusterMetadata) Reset() {
	*x = AggregatedClusterMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_kubeconfig_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedClusterMetadata) ProtoMessage() {}

func (x *AggregatedClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_kubeconfig_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedClusterMetadata.ProtoReflect.Descriptor instead.
func (*AggregatedClusterMetadata) Descriptor() ([]byte, []int) {
	return file_protos_kubeconfig_service_proto_rawDescGZIP(), []int{7}
}

func (x *AggregatedClusterMetadata) GetMetadata() *ClusterMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AggregatedClusterMetadata) GetDataResolvers() []MetadataResolverType {
	if x != nil {
		return x.DataResolvers
	}
	return nil
}

func (x *AggregatedClusterMetadata) GetStatus() ClusterInformationStatus {
	if x != nil {
		return x.Status
	}
	return ClusterInformationStatus_INFO_NOT_SETTED
}

type GetAvailableClustersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRes *CommonRes                   `protobuf:"bytes,1,opt,name=CommonRes,proto3" json:"CommonRes,omitempty"`
	Clusters  []*AggregatedClusterMetadata `protobuf:"bytes,2,rep,name=Clusters,proto3" json:"Clusters,omitempty"`
}

func (x *GetAvailableClustersRes) Reset() {
	*x = GetAvailableClustersRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_kubeconfig_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableClustersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableClustersRes) ProtoMessage() {}

func (x *GetAvailableClustersRes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_kubeconfig_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableClustersRes.ProtoReflect.Descriptor instead.
func (*GetAvailableClustersRes) Descriptor() ([]byte, []int) {
	return file_protos_kubeconfig_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetAvailableClustersRes) GetCommonRes() *CommonRes {
	if x != nil {
		return x.CommonRes
	}
	return nil
}

func (x *GetAvailableClustersRes) GetClusters() []*AggregatedClusterMetadata {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type RegisterClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq   *CommonReq `protobuf:"bytes,1,opt,name=CommonReq,proto3" json:"CommonReq,omitempty"`
	ClusterName string     `protobuf:"bytes,2,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	AccountId   string     `protobuf:"bytes,3,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
}

func (x *RegisterClusterReq) Reset() {
	*x = RegisterClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_kubeconfig_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterClusterReq) ProtoMessage() {}

func (x *RegisterClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_protos_kubeconfig_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterClusterReq.ProtoReflect.Descriptor instead.
func (*RegisterClusterReq) Descriptor() ([]byte, []int) {
	return file_protos_kubeconfig_service_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterClusterReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *RegisterClusterReq) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RegisterClusterReq) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

var File_protos_kubeconfig_service_proto protoreflect.FileDescriptor

var file_protos_kubeconfig_service_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x13, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9d, 0x03, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e,
	0x66, 0x72, 0x61, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x36, 0x0a,
	0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x66, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x45, 0x0a, 0x17, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x4c, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x22, 0x84, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x35, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5c,
	0x0a, 0x0d, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x33, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x5c, 0x0a, 0x0d,
	0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x19, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x46, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x33, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x52, 0x09, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x33, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x2a, 0x45, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x45, 0x4e, 0x56, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4d, 0x44, 0x53, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x03, 0x2a, 0x81, 0x01, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x52, 0x45,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x52, 0x45, 0x44,
	0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4b, 0x10, 0x65,
	0x2a, 0x60, 0x0a, 0x14, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x54, 0x41,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x4f, 0x58, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x4b, 0x55, 0x42, 0x45, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52,
	0x10, 0x04, 0x2a, 0x85, 0x02, 0x0a, 0x18, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x4f, 0x4b, 0x5f, 0x4e, 0x4f, 0x5f, 0x43,
	0x52, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x23,
	0x0a, 0x1f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x54,
	0x4f, 0x4b, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x4f,
	0x4b, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4b, 0x10, 0x65, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54,
	0x4f, 0x4b, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c,
	0x56, 0x45, 0x52, 0x10, 0x66, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x4f, 0x4b, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x4f, 0x4b, 0x10, 0x67, 0x32, 0xf9, 0x05, 0x0a, 0x0a, 0x4b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x15, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x10,
	0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x21, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0f, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x36,
	0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x75, 0x62, 0x67, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_protos_kubeconfig_service_proto_rawDescOnce sync.Once
	file_protos_kubeconfig_service_proto_rawDescData = file_protos_kubeconfig_service_proto_rawDesc
)

func file_protos_kubeconfig_service_proto_rawDescGZIP() []byte {
	file_protos_kubeconfig_service_proto_rawDescOnce.Do(func() {
		file_protos_kubeconfig_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_kubeconfig_service_proto_rawDescData)
	})
	return file_protos_kubeconfig_service_proto_rawDescData
}

var file_protos_kubeconfig_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_protos_kubeconfig_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_protos_kubeconfig_service_proto_goTypes = []interface{}{
	(CredentialResolverKind)(0),       // 0: kubeconfig.CredentialResolverKind
	(CredentialResolverStatus)(0),     // 1: kubeconfig.CredentialResolverStatus
	(MetadataResolverType)(0),         // 2: kubeconfig.MetadataResolverType
	(ClusterInformationStatus)(0),     // 3: kubeconfig.ClusterInformationStatus
	(*CredResolverConfig)(nil),        // 4: kubeconfig.CredResolverConfig
	(*CredResolversReq)(nil),          // 5: kubeconfig.CredResolversReq
	(*GetCredResolversRes)(nil),       // 6: kubeconfig.GetCredResolversRes
	(*DeleteCredResolverReq)(nil),     // 7: kubeconfig.DeleteCredResolverReq
	(*KubeConfigReq)(nil),             // 8: kubeconfig.KubeConfigReq
	(*KubeConfigRes)(nil),             // 9: kubeconfig.KubeConfigRes
	(*ClusterMetadata)(nil),           // 10: kubeconfig.ClusterMetadata
	(*AggregatedClusterMetadata)(nil), // 11: kubeconfig.AggregatedClusterMetadata
	(*GetAvailableClustersRes)(nil),   // 12: kubeconfig.GetAvailableClustersRes
	(*RegisterClusterReq)(nil),        // 13: kubeconfig.RegisterClusterReq
	nil,                               // 14: kubeconfig.CredResolverConfig.ResolverAttributesEntry
	nil,                               // 15: kubeconfig.ClusterMetadata.ClusterTagsEntry
	(*CommonRes)(nil),                 // 16: kubeconfig.CommonRes
	(*CommonReq)(nil),                 // 17: kubeconfig.CommonReq
}
var file_protos_kubeconfig_service_proto_depIdxs = []int32{
	0,  // 0: kubeconfig.CredResolverConfig.Kind:type_name -> kubeconfig.CredentialResolverKind
	14, // 1: kubeconfig.CredResolverConfig.ResolverAttributes:type_name -> kubeconfig.CredResolverConfig.ResolverAttributesEntry
	1,  // 2: kubeconfig.CredResolverConfig.Status:type_name -> kubeconfig.CredentialResolverStatus
	4,  // 3: kubeconfig.CredResolversReq.Configs:type_name -> kubeconfig.CredResolverConfig
	16, // 4: kubeconfig.GetCredResolversRes.CommonRes:type_name -> kubeconfig.CommonRes
	4,  // 5: kubeconfig.GetCredResolversRes.Configs:type_name -> kubeconfig.CredResolverConfig
	17, // 6: kubeconfig.KubeConfigReq.CommonReq:type_name -> kubeconfig.CommonReq
	16, // 7: kubeconfig.KubeConfigRes.CommonRes:type_name -> kubeconfig.CommonRes
	15, // 8: kubeconfig.ClusterMetadata.ClusterTags:type_name -> kubeconfig.ClusterMetadata.ClusterTagsEntry
	10, // 9: kubeconfig.AggregatedClusterMetadata.Metadata:type_name -> kubeconfig.ClusterMetadata
	2,  // 10: kubeconfig.AggregatedClusterMetadata.DataResolvers:type_name -> kubeconfig.MetadataResolverType
	3,  // 11: kubeconfig.AggregatedClusterMetadata.Status:type_name -> kubeconfig.ClusterInformationStatus
	16, // 12: kubeconfig.GetAvailableClustersRes.CommonRes:type_name -> kubeconfig.CommonRes
	11, // 13: kubeconfig.GetAvailableClustersRes.Clusters:type_name -> kubeconfig.AggregatedClusterMetadata
	17, // 14: kubeconfig.RegisterClusterReq.CommonReq:type_name -> kubeconfig.CommonReq
	17, // 15: kubeconfig.Kubeconfig.GetAvailableCredResolvers:input_type -> kubeconfig.CommonReq
	4,  // 16: kubeconfig.Kubeconfig.SetCredResolver:input_type -> kubeconfig.CredResolverConfig
	5,  // 17: kubeconfig.Kubeconfig.SetCredResolvers:input_type -> kubeconfig.CredResolversReq
	7,  // 18: kubeconfig.Kubeconfig.DeleteCredResolver:input_type -> kubeconfig.DeleteCredResolverReq
	17, // 19: kubeconfig.Kubeconfig.GetKubeConfig:input_type -> kubeconfig.CommonReq
	8,  // 20: kubeconfig.Kubeconfig.SetKubeConfig:input_type -> kubeconfig.KubeConfigReq
	17, // 21: kubeconfig.Kubeconfig.GetAvailableClusters:input_type -> kubeconfig.CommonReq
	13, // 22: kubeconfig.Kubeconfig.RegisterCluster:input_type -> kubeconfig.RegisterClusterReq
	17, // 23: kubeconfig.Kubeconfig.SyncAvailableClusters:input_type -> kubeconfig.CommonReq
	17, // 24: kubeconfig.Kubeconfig.Ping:input_type -> kubeconfig.CommonReq
	6,  // 25: kubeconfig.Kubeconfig.GetAvailableCredResolvers:output_type -> kubeconfig.GetCredResolversRes
	16, // 26: kubeconfig.Kubeconfig.SetCredResolver:output_type -> kubeconfig.CommonRes
	16, // 27: kubeconfig.Kubeconfig.SetCredResolvers:output_type -> kubeconfig.CommonRes
	16, // 28: kubeconfig.Kubeconfig.DeleteCredResolver:output_type -> kubeconfig.CommonRes
	9,  // 29: kubeconfig.Kubeconfig.GetKubeConfig:output_type -> kubeconfig.KubeConfigRes
	16, // 30: kubeconfig.Kubeconfig.SetKubeConfig:output_type -> kubeconfig.CommonRes
	12, // 31: kubeconfig.Kubeconfig.GetAvailableClusters:output_type -> kubeconfig.GetAvailableClustersRes
	16, // 32: kubeconfig.Kubeconfig.RegisterCluster:output_type -> kubeconfig.CommonRes
	16, // 33: kubeconfig.Kubeconfig.SyncAvailableClusters:output_type -> kubeconfig.CommonRes
	16, // 34: kubeconfig.Kubeconfig.Ping:output_type -> kubeconfig.CommonRes
	25, // [25:35] is the sub-list for method output_type
	15, // [15:25] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_protos_kubeconfig_service_proto_init() }
func file_protos_kubeconfig_service_proto_init() {
	if File_protos_kubeconfig_service_proto != nil {
		return
	}
	file_protos_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protos_kubeconfig_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredResolverConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_kubeconfig_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredResolversReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_kubeconfig_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredResolversRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_kubeconfig_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCredResolverReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_kubeconfig_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_kubeconfig_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeConfigRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_kubeconfig_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_kubeconfig_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedClusterMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_kubeconfig_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableClustersRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_kubeconfig_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_kubeconfig_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_kubeconfig_service_proto_goTypes,
		DependencyIndexes: file_protos_kubeconfig_service_proto_depIdxs,
		EnumInfos:         file_protos_kubeconfig_service_proto_enumTypes,
		MessageInfos:      file_protos_kubeconfig_service_proto_msgTypes,
	}.Build()
	File_protos_kubeconfig_service_proto = out.File
	file_protos_kubeconfig_service_proto_rawDesc = nil
	file_protos_kubeconfig_service_proto_goTypes = nil
	file_protos_kubeconfig_service_proto_depIdxs = nil
}
