syntax = "proto3";

package kubeconfig;

import "protos/common.proto";

option go_package = "github.com/pubg/kubeconfig-updater/backend/controller/protos";

service Kubeconfig {
  rpc GetAvailableCredResolvers(CommonReq) returns (GetCredResolversRes) {}
  rpc SetCredResolver(CredResolverConfig) returns (CommonRes) {}
  rpc SetCredResolvers(CredResolversReq) returns (CommonRes) {}
  rpc DeleteCredResolver(DeleteCredResolverReq) returns (CommonRes) {}
  rpc SyncAvailableCredResolvers(CommonReq) returns (CommonRes) {}

  rpc GetSupportedVendors(CommonReq) returns (GetSupportedVendorsRes) {}
  rpc GetRegisteredProfiles(GetRegisteredProfilesReq) returns (GetRegisteredProfilesRes) {}

  rpc GetAvailableClusters(CommonReq) returns (GetAvailableClustersRes) {}
  rpc RegisterCluster(RegisterClusterReq) returns (CommonRes) {}
  rpc DeleteCluster(DeleteClusterReq) returns (CommonRes) {}
  rpc SyncAvailableClusters(CommonReq) returns (CommonRes) {}
}

service Application {
  rpc Ping(CommonReq) returns (CommonRes) {}
  rpc Version(CommonReq) returns (CommonRes) {}
}

enum CredentialResolverKind {
  DEFAULT = 0; //SDK Default Chain
  ENV = 1; //SDK ENV
  IMDS = 2; //Cloud IMDS API
  PROFILE = 3; //SDK Profile
}

enum CredentialResolverStatus {
  CRED_RESOLVER_UNKNOWN = 0;

  CRED_REGISTERED_OK = 1;
  CRED_REGISTERED_NOT_OK = 2;

  CRED_SUGGESTION_OK = 101;
}

message CredResolverConfig {
  string AccountId = 1;
  string InfraVendor = 3;
  string AccountAlias = 2;
  CredentialResolverKind Kind = 4;
  map<string, string> ResolverAttributes = 5;
  CredentialResolverStatus Status = 6;
  string StatusDetail = 7;
}

message CredResolversReq {
  repeated CredResolverConfig Configs = 1;
}

message GetCredResolversRes {
  CommonRes CommonRes = 1;
  repeated CredResolverConfig Configs = 2;
}

message DeleteCredResolverReq {
  string AccountId = 1;
}

message GetSupportedVendorsRes {
  CommonRes CommonRes = 1;
  repeated Vendor Vendors = 2;
}

message Vendor {
  string VendorName = 1;
}

message GetRegisteredProfilesReq {
  string InfraVendor = 1;
}

message GetRegisteredProfilesRes {
  CommonRes CommonRes = 1;
  repeated Profile profiles = 2;
}

message Profile {
  string ProfileName = 1;
  string AccountId = 2;
  string InfraVendor = 3;
}

message KubeConfigReq {
  CommonReq CommonReq = 1;
  string Config = 2;
}

message KubeConfigRes {
  CommonRes CommonRes = 1;
  string Config = 2;
}

message ClusterMetadata {
  string ClusterName = 1;
  string CredResolverId = 2;
  // ClusterRegion, ClusterEngine, ServicePhase, InfraVendor, InfraAccountId, ServiceTag, ClusterGroup
  map<string, string> ClusterTags = 3;
}

enum ClusterInformationStatus {
  INFO_NOT_SETTED = 0;

  REGISTERED_OK = 1; //정상임
  REGISTERED_NOTOK_NO_CRED_RESOLVER = 2; //등록되었으나 CredResolver가 없음
  REGISTERED_NOTOK_CRED_RES_NOTOK = 3; //등록되었으나 CredResolver가 비정상임
  REGISTERED_UNKNOWN = 4; //등록되었으나 상태를 알 수 없음

  SUGGESTION_OK = 101; //등록 가능
  SUGGESTION_NOTOK_NO_CRED_RESOLVER = 102; //CredResolver가 없어서 등록 불가
  SUGGESTION_NOTOK_CRED_RES_NOTOK = 103; //CredResolver가 비정상이라 등록 불가
}

message AggregatedClusterMetadata {
  ClusterMetadata Metadata = 1;
  repeated string DataResolvers = 2;
  ClusterInformationStatus Status = 3;
}

message GetAvailableClustersRes {
  CommonRes CommonRes = 1;
  repeated AggregatedClusterMetadata Clusters = 2;
}

message RegisterClusterReq {
  CommonReq CommonReq = 1;
  string ClusterName = 2;
  string AccountId = 3;
}

message DeleteClusterReq {
  CommonReq CommonReq = 1;
  string ClusterName = 2;
  bool Cascade = 3;
}
